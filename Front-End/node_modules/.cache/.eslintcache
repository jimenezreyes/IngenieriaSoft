[{"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/index.js":"1","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/reportWebVitals.js":"2","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/App.js":"3","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/Superadmin.js":"4","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/Participante.js":"5","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/BottomBar.js":"6","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/Administrador.js":"7","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/Register.js":"8","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/Login.js":"9","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/VistaTorneos.js":"10","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/EditProfile.js":"11","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/CRUDTorneo.js":"12","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/CRUDAdmin.js":"13"},{"size":640,"mtime":1700589416371,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1700589416371,"results":"16","hashOfConfig":"15"},{"size":1135,"mtime":1700589416367,"results":"17","hashOfConfig":"15"},{"size":809,"mtime":1701373083515,"results":"18","hashOfConfig":"15"},{"size":870,"mtime":1701373083515,"results":"19","hashOfConfig":"15"},{"size":310,"mtime":1700589416367,"results":"20","hashOfConfig":"15"},{"size":1011,"mtime":1701653481599,"results":"21","hashOfConfig":"15"},{"size":7879,"mtime":1701653481603,"results":"22","hashOfConfig":"15"},{"size":4090,"mtime":1701653481599,"results":"23","hashOfConfig":"15"},{"size":3038,"mtime":1701653481603,"results":"24","hashOfConfig":"15"},{"size":13272,"mtime":1701653481599,"results":"25","hashOfConfig":"15"},{"size":11606,"mtime":1701663031832,"results":"26","hashOfConfig":"15"},{"size":14928,"mtime":1701653481599,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1auhtyc",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"31"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/index.js",[],[],["69"],"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/reportWebVitals.js",[],[],"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/App.js",[],[],"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/Superadmin.js",[],[],"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/Participante.js",[],[],"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/BottomBar.js",[],[],"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/Administrador.js",[],[],"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/Register.js",[],[],"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/Login.js",[],[],"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/VistaTorneos.js",[],[],"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/EditProfile.js",["70"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input } from 'reactstrap';\nimport './EditProfile.css';\nimport Login from './Login';\n\nfunction EditProfile() { \n\n  const [formData, setFormData] = useState({\n    idParticipante: '',\n    nombre: '',\n    apellido: '',\n    correo: '',\n    contrasena: '',\n    gamertag: '',\n    foto: null,\n  });\n  \n  const [modal, setModal] = useState(false);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [contrasenaEliminar, setContrasenaEliminar] = useState('');\n  const [deleteError, setDeleteError] = useState('');\n  const [errors, setErrors] = useState({});\n  const [isErrorModalOpen, setIsErrorModalOpen] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [intentosFallidos, setIntentosFallidos] = useState(0);\n  const [successModalOpen, setSuccessModalOpen] = useState(false);\n  const navigate = useNavigate();\n\n  const toggleModal = () => setModal(!modal);\n  const toggleDeleteModal = () => setDeleteModal(!deleteModal);\n\n  useEffect(() => {\n    // Obtener el ID del localStorage\n    const idParticipante = localStorage.getItem('id');\n    setFormData({ ...formData, idParticipante });\n  }, []);\n\n  if (!localStorage.getItem('tipo_usuario')) {\n    return <Login />\n  }\n\n  if (localStorage.getItem('tipo_usuario') !== 'participante') {\n    return('No tienes permisos para ver esta página.')\n  }\n\n  const datosValidos = () => {\n    let errors = {};\n    let isValid = true;\n\n    // Validación del correo\n    if(formData.correo){\n      if (typeof formData.correo !== \"undefined\") {\n        let lastAtPos = formData.correo.lastIndexOf('@');\n        let lastDotPos = formData.correo.lastIndexOf('.');\n\n        if (!(lastAtPos < lastDotPos && lastAtPos > 0 && formData.correo.indexOf('@@') === -1 && lastDotPos > 2 && (formData.correo.length - lastDotPos) > 2)) {\n          isValid = false;\n          errors[\"correo\"] = \"Correo inválido.\";\n        }\n      }\n    }      \n    \n    // Validación de la contraseña\n    if(formData.contrasena){\n      if (formData.contrasena.length < 8) {\n        isValid = false;\n        errors[\"contrasena\"] = \"La contraseña debe tener al menos 8 caracteres.\";\n      }\n    }\n\n     // Validación del gamertag\n    if (formData.gamertag) {\n      const regex = /^[a-zA-Z0-9]+$/; // Expresión regular para alfanuméricos sin caracteres especiales\n      const startsWithAt = formData.gamertag.startsWith('@');\n      const lengthValid = formData.gamertag.length >= 5;\n      const containsOnlyAlphanumeric = regex.test(formData.gamertag.slice(1));\n\n      if (!(startsWithAt && lengthValid && containsOnlyAlphanumeric)) {\n        isValid = false;\n        errors[\"gamertag\"] = \"Gamertag inválido. Debe comenzar con '@' y tener al menos 5 caracteres alfanuméricos.\";\n      }          \n    } \n\n    setErrors(errors);\n    return isValid;\n  };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    setFormData({\n      ...formData,\n      foto: file,\n    });\n  };\n\n  const handleGuardarCambios = async (e) => {\n    e.preventDefault();\n    if (!datosValidos()) {\n      return;\n    }\n    console.log('Datos actualizados:', formData);\n    \n    try {\n      const res = await fetch(`http://127.0.0.1:5000/participante/editarPerfil`, {\n        method: 'PUT',\n        headers: {            \n            'Content-Type': 'application/json',\n        },\n          body: JSON.stringify(formData),\n      });\n\n      const data = await res.json();\n      console.log('Respuesta del servidor:', data);\n      if (data.message === 'Perfil actualizado exitosamente') {       \n         // Verificar que los campos no estén vacíos\n        if (formData.nombre) {\n          localStorage.setItem('nombre', formData.nombre);\n        }\n        if (formData.apellido) {\n          localStorage.setItem('apellido', formData.apellido);\n        }\n\n        if (formData.correo) {\n          localStorage.setItem('email', formData.correo);\n        }\n\n        if (formData.contrasena) {\n          localStorage.setItem('contrasena', formData.contrasena);\n        }\n\n        if (formData.gamertag) {\n          localStorage.setItem('gamertag', formData.gamertag);\n        }\n\n        if (formData.foto) {\n          localStorage.setItem('foto', formData.foto);\n        }\n        openSuccessModal();  \n      } else if (data.error === 'Error, correo asociado a otra cuenta. Puede estar asociado a una cuenta no apta para participar.') {\n        setErrors({correo: data.error });\n      } else if (data.error === 'Error, tag ya asignado'){\n        setErrors({gamertag: data.error});\n      } else if (data.error) {\n        // Mostrar el error en el modal\n        setErrorMessage(data.error);\n        setIsErrorModalOpen(true);\n      }\n    } catch (error) {\n      if (error.code === 'ECONNREFUSED') {\n        // Error de conexión rechazada (servidor no disponible)\n        console.error('Error: El servidor no está disponible');\n        // Mostrar el error en el modal\n        setErrorMessage('Error: El servidor no está disponible, intenta más tarde');\n        setIsErrorModalOpen(true);\n      } else {\n        // Otro tipo de error\n        console.error('Error al enviar datos al servidor:', error);\n        // Mostrar el error en el modal\n        setErrorMessage('Error en el servidor, intenta más tarde');\n        setIsErrorModalOpen(true);\n      }\n    }    \n  };\n\n  const handleEliminarPerfil = () => {\n    toggleDeleteModal();\n    setDeleteError('');\n  };\n  \n\n  const handleConfirmarEliminar = async () => {\n    try {\n      if (!contrasenaEliminar) {\n        setDeleteError('Ingresa tu contraseña');\n        return;\n      }\n      // Lógica para eliminar el perfil en el servidor\n      const res = await fetch(`http://127.0.0.1:5000/participante/eliminarPerfil`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          idParticipante: formData.idParticipante,\n          contrasenaEliminar: contrasenaEliminar,\n        }),\n      });\n  \n      const data = await res.json();\n      console.log('Respuesta del servidor:', data);\n  \n      // Validar la respuesta del servidor\n      if (data.message === 'Perfil eliminado exitosamente') {\n        // Cerrar sesión y redirigir a la página de inicio\n        localStorage.clear();\n        navigate('/');\n      } else if (data.error === 'Contraseña incorrecta') {\n        // Aumentar el contador de intentos fallidos\n        setIntentosFallidos(intentosFallidos + 1);\n         // Mostrar el mensaje de error en el modal\n        if (intentosFallidos < 2) {\n          setDeleteError(`Contraseña incorrecta. Intentos restantes: ${2 - intentosFallidos}`);\n        } else {\n          setDeleteError('Demasiados intentos fallidos. Se cerrará la sesión.');\n        // Aquí puedes agregar la lógica para cerrar la sesión después de tres intentos fallidos\n          setTimeout(() => {\n          // Cerrar sesión y redirigir a la página de inicio\n            localStorage.clear();\n            navigate('/');\n          }, 3000);\n        }       \n      } else {      \n            // Actualizar el estado con el mensaje de error en caso de error de red\n        setDeleteError('Error de red, inténtalo de nuevo');\n      }\n    } catch (error) {\n      console.error('Error al enviar datos al servidor:', error);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsErrorModalOpen(false);\n  };\n\n  const handleClickVolver = () => {\n    navigate('/participante'); // Navegar hacia atrás\n  };\n\n  const openSuccessModal = () => {\n    setSuccessModalOpen(true);\n  };\n\n  return (\n    <div className=\"EditProfile\">\n      <h1>Editar perfil</h1>\n      <form onSubmit={handleGuardarCambios}>    \n\n        <FormGroup>\n          <Label for=\"nombre\">Nombre:</Label>\n          <Input\n            type=\"text\"\n            id=\"nombre\"\n            value={formData.nombre}\n            onChange={(e) => setFormData({ ...formData, nombre: e.target.value })}            \n          />\n          {errors.nombre&& <div className=\"alert alert-danger\">{errors.nombre}</div>}\n        </FormGroup>\n\n        <FormGroup>\n          <Label for=\"apellido\">Apellido:</Label>\n          <Input\n            type=\"text\"\n            id=\"apellido\"\n            value={formData.apellido}\n            onChange={(e) => setFormData({ ...formData, apellido: e.target.value })}          \n          />\n          {errors.apellido&& <div className=\"alert alert-danger\">{errors.apellido}</div>}\n        </FormGroup>\n\n        <FormGroup>\n          <Label for=\"correo\">Correo:</Label>\n          <Input\n            type=\"email\"\n            id=\"correo\"\n            value={formData.correo}\n            onChange={(e) => setFormData({ ...formData, correo: e.target.value })}           \n          />\n          {errors.correo&& <div className=\"alert alert-danger\">{errors.correo}</div>}\n        </FormGroup>\n\n        <FormGroup>\n          <Label for=\"contrasena\">Contraseña:</Label>\n          <Input\n            type=\"password\"\n            id=\"contrasena\"\n            value={formData.contrasena}\n            onChange={(e) => setFormData({ ...formData, contrasena: e.target.value })}            \n          />\n          {errors.contrasena&& <div className=\"alert alert-danger\">{errors.contrasena}</div>}\n        </FormGroup>\n        \n\n        <FormGroup>\n          <Label for=\"gamertag\">Gamertag:</Label>\n          <Input\n            type=\"text\"\n            id=\"gamertag\"\n            value={formData.gamertag}\n            onChange={(e) => setFormData({ ...formData, gamertag: e.target.value })}            \n          />\n          {errors.gamertag&& <div className=\"alert alert-danger\">{errors.gamertag}</div>}\n        </FormGroup>\n\n        <FormGroup className=\"d-flex flex-column align-items-center\">\n            <Label for=\"foto\">Foto de perfil:</Label>      \n            {/* Botón para abrir el explorador de archivos */}\n            <Button color=\"primary\" onClick={toggleModal}>\n            Seleccionar foto\n            </Button>\n        </FormGroup>\n\n        <FormGroup className=\"mb-3 text-center\">\n            <Button color=\"primary\" type=\"submit\" className=\"mr-2\">\n             Guardar cambios\n            </Button>\n            <Button color=\"primary\" onClick={handleClickVolver}>\n             Volver a la vista de participante\n            </Button>\n            <Button color=\"danger\" onClick={handleEliminarPerfil}>\n            Eliminar perfil\n          </Button>\n        </FormGroup>        \n\n        <FormGroup className=\"mb-3 text-center\"> \n          <Button color=\"danger\" onClick={handleEliminarPerfil}>\n            Eliminar perfil\n          </Button>        \n        </FormGroup>\n      </form>\n\n      {/* Modal para la selección de foto */}\n      <Modal isOpen={modal} toggle={toggleModal}>\n        <ModalHeader toggle={toggleModal}>Seleccionar foto</ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup>\n              <Label for=\"fotoModal\">Foto</Label>\n              <Input type=\"file\" id=\"fotoModal\" onChange={handleFileChange} />\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" onClick={toggleModal}>\n            Confirmar\n          </Button>{' '}\n          <Button color=\"secondary\" onClick={toggleModal}>\n            Cancelar\n          </Button>\n        </ModalFooter>\n      </Modal>\n\n      <Modal isOpen={deleteModal} toggle={toggleDeleteModal}>\n        <ModalHeader toggle={toggleDeleteModal}>Confirmar eliminación</ModalHeader>\n        <ModalBody>\n          <p>¿Estás seguro de que deseas eliminar tu perfil?</p>\n          <Form>\n            <FormGroup>\n              <Label for=\"contrasenaEliminar\">Ingresa tu contraseña:</Label>\n              <Input\n                type=\"password\"\n                id=\"contrasenaEliminar\"\n                value={contrasenaEliminar}\n                onChange={(e) => setContrasenaEliminar(e.target.value)}\n                required\n              />\n            </FormGroup>\n          </Form>\n          {deleteError && <div className=\"alert alert-danger\">{deleteError}</div>}\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"danger\" onClick={handleConfirmarEliminar}>\n            Eliminar\n          </Button>{' '}\n          <Button color=\"secondary\" onClick={toggleDeleteModal}>\n            Cancelar\n          </Button>\n        </ModalFooter>\n      </Modal>\n\n      <Modal isOpen={successModalOpen} toggle={() => setSuccessModalOpen(false)}>\n      <ModalHeader toggle={() => setSuccessModalOpen(false)}>Éxito</ModalHeader>\n        <ModalBody>\n          <p>Los datos han sido actualizados correctamente.</p>\n        </ModalBody>\n      <ModalFooter>\n          <Button color=\"primary\" onClick={() => setSuccessModalOpen(false)}>\n            Cerrar\n          </Button>\n      </ModalFooter>\n      </Modal>\n\n      {isErrorModalOpen && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <span className=\"close\" onClick={handleCloseModal}>&times;</span>\n            <p>{errorMessage}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EditProfile;","/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/CRUDTorneo.js",["71"],[],"/home/abraham/Escritorio/Ingenieria de softwaare/Practica 5/IngenieriaSoft/Front-End/src/CRUDAdmin.js",[],[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":37,"column":6,"nodeType":"76","endLine":37,"endColumn":8,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":52,"column":25,"nodeType":"80","messageId":"81","endLine":52,"endColumn":34},"no-new-object",["82"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["83"],"no-unused-vars","'fechahora' is assigned a value but never used.","Identifier","unusedVar","no-object-constructor",{"desc":"84","fix":"85"},"Update the dependencies array to be: [formData]",{"range":"86","text":"87"},[1314,1316],"[formData]"]